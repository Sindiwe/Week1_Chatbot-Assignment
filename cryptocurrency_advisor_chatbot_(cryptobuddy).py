# -*- coding: utf-8 -*-
"""Cryptocurrency Advisor Chatbot (CryptoBuddy)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19DC-d8Rru7CS3g5zkPIM_vfBhx_k-zh5
"""

import random

# Predefined Crypto Data
crypto_db = {
    "Bitcoin": {
        "price_trend": "rising",
        "market_cap": "high",
        "energy_use": "high",
        "sustainability_score": 3/10
    },
    "Ethereum": {
        "price_trend": "stable",
        "market_cap": "high",
        "energy_use": "medium",
        "sustainability_score": 6/10
    },
    "Cardano": {
        "price_trend": "rising",
        "market_cap": "medium",
        "energy_use": "low",
        "sustainability_score": 8/10
    },
    "Solana": { # Added for more examples
        "price_trend": "rising",
        "market_cap": "high",
        "energy_use": "high",
        "sustainability_score": 4/10
    },
    "Polkadot": { # Added for more examples
        "price_trend": "stable",
        "market_cap": "medium",
        "energy_use": "low",
        "sustainability_score": 7/10
    }
}

def get_crypto_response(user_input):
    """
    This function provides responses for cryptocurrency-related queries based on rules
    and predefined crypto data, including investment advice.
    """
    user_input = user_input.lower() # Convert input to lowercase for easier matching

    # --- Cryptocurrency-specific rules and advice ---

    # Advice based on profitability
    if "trending up" in user_input or "profitable crypto" in user_input or "best for profit" in user_input:
        profitable_coins = [
            coin for coin, data in crypto_db.items()
            if data["price_trend"] == "rising" and data["market_cap"] == "high"
        ]
        if profitable_coins:
            # Ensured the f-string is properly terminated here.
            return f"Looking for profitability? Based on current trends, consider looking into: {', '.join(profitable_coins)}. They are showing a rising price trend and have a high market cap! ðŸ“ˆ"
        else:
            return "Currently, I don't see any cryptocurrencies with both a 'rising' price trend and a 'high' market cap in my database. The market can be dynamic!"

    # Advice based on sustainability
    elif "sustainable coin" in user_input or "eco-friendly crypto" in user_input or "green crypto" in user_input:
        sustainable_coins = [
            (coin, data["sustainability_score"]) for coin, data in crypto_db.items()
            if data["energy_use"] == "low" and data["sustainability_score"] > 7/10
        ]
        if sustainable_coins:
            # Sort to recommend the highest score if multiple
            sustainable_coins.sort(key=lambda x: x[1], reverse=True)
            recommended_coin = sustainable_coins[0][0]
            return f"Invest in {recommended_coin}! ðŸŒ± Itâ€™s eco-friendly (low energy use) and has long-term potential with a great sustainability score!"
        else:
            return "Based on my current data, I don't have any cryptocurrencies that perfectly match the criteria for a highly sustainable and low energy use recommendation right now."

    # General cryptocurrency definition
    elif "what is cryptocurrency" in user_input or "what is crypto" in user_input:
        return "Cryptocurrency is a digital or virtual currency secured by cryptography, making it nearly impossible to counterfeit. It operates on decentralized networks, typically blockchain technology, offering financial autonomy."

    # Bitcoin specific
    elif "what is bitcoin" in user_input or "about bitcoin" in user_input:
        bitcoin_data = crypto_db.get("Bitcoin", {})
        price_trend = bitcoin_data.get("price_trend", "unknown")
        market_cap = bitcoin_data.get("market_cap", "unknown")
        energy_use = bitcoin_data.get("energy_use", "unknown")
        sustainability_score = bitcoin_data.get("sustainability_score", "unknown")
        return (f"Bitcoin (BTC) is the first and most well-known cryptocurrency. It's often called 'digital gold' "
                f"and remains the dominant cryptocurrency by market capitalization ({market_cap}). "
                f"Its price trend is currently {price_trend}. Note that its energy usage is {energy_use} "
                f"with a sustainability score of {sustainability_score}/10.")

    # Ethereum specific
    elif "what is ethereum" in user_input or "about ethereum" in user_input:
        ethereum_data = crypto_db.get("Ethereum", {})
        price_trend = ethereum_data.get("price_trend", "unknown")
        market_cap = ethereum_data.get("market_cap", "unknown")
        energy_use = ethereum_data.get("energy_use", "unknown")
        sustainability_score = ethereum_data.get("sustainability_score", "unknown")
        return (f"Ethereum (ETH) is a decentralized platform that enables smart contracts and decentralized "
                f"applications (dApps). It's the second-largest cryptocurrency by market cap ({market_cap}). "
                f"Its price trend is currently {price_trend}. Its energy usage is {energy_use} "
                f"with a sustainability score of {sustainability_score}/10.")

    # Cardano specific
    elif "what is cardano" in user_input or "about cardano" in user_input:
        cardano_data = crypto_db.get("Cardano", {})
        price_trend = cardano_data.get("price_trend", "unknown")
        market_cap = cardano_data.get("market_cap", "unknown")
        energy_use = cardano_data.get("energy_use", "unknown")
        sustainability_score = cardano_data.get("sustainability_score", "unknown")
        return (f"Cardano (ADA) is known for its research-driven approach to blockchain development. "
                f"Its price trend is currently {price_trend} and has a {market_cap} market cap. "
                f"It features {energy_use} energy use and a high sustainability score of {sustainability_score}/10.")


    # Altcoins
    elif "what are altcoins" in user_input or "other cryptocurrencies" in user_input:
        return "Altcoins are all cryptocurrencies other than Bitcoin. They aim to offer new features or improvements over Bitcoin, such as faster transaction speeds or different consensus mechanisms."

    # Risks of investment
    elif "risks of crypto" in user_input or "is crypto risky" in user_input or "crypto investment risks" in user_input:
        return "Key risks include extreme market volatility, regulatory uncertainty, security vulnerabilities (hacks, scams), tax complexities, and a lack of consumer protection compared to traditional finance."

    # Benefits of investment
    elif "benefits of crypto" in user_input or "why invest in crypto" in user_input:
        return "Benefits include decentralization, potentially lower transaction costs and faster transfers, increased security and transparency via blockchain, 24/7 market access, diverse investment assets, and high return potential (though with high risk)."

    # Decentralization
    elif "what is decentralization" in user_input or "decentralized crypto" in user_input:
        return "Decentralization in crypto means that the network isn't controlled by a single entity like a government or bank. This offers users greater control over their finances."

    # Blockchain technology
    elif "what is blockchain" in user_input:
        return "Blockchain is the underlying technology for most cryptocurrencies. It's a distributed, immutable ledger that records all transactions securely and transparently."

    # --- General conversational rules ---

    # Greetings
    elif "hello" in user_input or "hi" in user_input or "hey" in user_input:
        responses = ["Hey there!", "Hi! What crypto insights are you looking for today?", "Hello! Ready to talk crypto?"]
        return random.choice(responses)

    # Questions about name/identity
    elif "what is your name" in user_input or "who are you" in user_input:
        return "I'm CryptoBuddy, your AI-Powered Financial Sidekick! ðŸŒŸ"

    # Questions about capabilities
    elif "what can you do" in user_input or "help me" in user_input:
        return "I can help you analyze cryptocurrency data and provide investment advice based on profitability and sustainability. Let's find you a green and growing crypto!"

    # Acknowledgment/Agreement
    elif "ok" in user_input or "okay" in user_input:
        return "Alright! What else can I assist you with?"

    # Asking about well-being
    elif "how are you" in user_input:
        return "I'm a program, so I'm always ready to help! How can I assist your crypto journey today?"

    # General positive sentiment
    elif "thank you" in user_input or "thanks" in user_input:
        return "You're most welcome! Happy to help you navigate the crypto world."

    # General negative sentiment
    elif "no" in user_input:
        return "Understood. Is there anything else you'd like to discuss about crypto?"

    # --- Default responses for unrecognized input ---
    else:
        fallback_responses = [
            "Hmm, I'm not sure about that crypto query. Can you try rephrasing?",
            "That's an interesting question! My database might not have that specific info yet. Try asking about profitability or sustainability!",
            "I'm still learning the ropes of the crypto world. What else can I help you with?",
            "Apologies, I don't have a direct answer for that. Maybe ask about 'trending up' or 'sustainable coins'?"
        ]
        return random.choice(fallback_responses)

def main():
    """
    Main function to run the CryptoBuddy chatbot in a loop.
    """
    print("ðŸŒŸ CryptoBuddy: Hey there! Letâ€™s find you a green and growing crypto! Type 'bye' to exit.")

    while True:
        user_input = input("You: ") # Get input from the user

        if user_input.lower() == 'bye' or user_input.lower() == 'goodbye':
            print("CryptoBuddy: Goodbye! Keep an eye on the trends and invest wisely! ðŸš€")
            break # Exit the loop
        else:
            response = get_crypto_response(user_input) # Get a response from the chatbot
            print(f"CryptoBuddy: {response}") # Print the chatbot's response

# Ensure the main function runs when the script is executed
if __name__ == "__main__":
    main()